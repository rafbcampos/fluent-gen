#!/usr/bin/env node

import { readFileSync, writeFileSync } from 'node:fs';
import { join, dirname } from 'node:path';
import { fileURLToPath } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

/**
 * Generates builder-utilities-content.ts from builder-utilities.ts
 * This allows us to keep the source file for development while
 * embedding the content as a string for distribution
 */
function generateEmbeddedContent() {
  console.log('üì¶ Generating embedded builder utilities content...');

  try {
    // Read the source file
    const sourceFile = join(__dirname, '../src/gen/builder-utilities.ts');
    const content = readFileSync(sourceFile, 'utf8');

    // Escape template literals and backslashes for embedding
    const escapedContent = content
      .replace(/\\/g, '\\\\') // Escape backslashes
      .replace(/`/g, '\\`') // Escape template literals
      .replace(/\$\{/g, '\\${'); // Escape template expressions

    // Generate the embedded content file
    const embeddedFile = `/**
 * Auto-generated embedded content from builder-utilities.ts
 * DO NOT EDIT THIS FILE MANUALLY - it will be overwritten during build
 */

export const BUILDER_UTILITIES_CONTENT = \`${escapedContent}\`;
`;

    // Write the generated file
    const outputFile = join(__dirname, '../src/gen/builder-utilities-content.ts');
    writeFileSync(outputFile, embeddedFile, 'utf8');

    console.log('‚úÖ Generated builder-utilities-content.ts successfully');
  } catch (error) {
    console.error('‚ùå Failed to generate embedded content:', error);
    process.exit(1);
  }
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateEmbeddedContent();
}
