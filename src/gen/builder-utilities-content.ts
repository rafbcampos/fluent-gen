/**
 * Auto-generated embedded content from builder-utilities.ts
 * DO NOT EDIT THIS FILE MANUALLY - it will be overwritten during build
 */

export const BUILDER_UTILITIES_CONTENT = `/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
export const FLUENT_BUILDER_SYMBOL = Symbol.for('fluent-builder');

/**
 * Parameters for nested context generation
 * Used by parent builder to create context for child builders
 *
 * IMPORTANT: Due to the deferred pattern, child builders are NOT executed when context is created.
 * The parent can only use information from its own state and parent context.
 * Children should augment context in their own build() method before passing to grandchildren.
 */
export interface NestedContextParams<C extends BaseBuildContext> {
  /** Context from parent builder */
  readonly parentContext: C;
  /** Name of the parameter being built */
  readonly parameterName: string;
  /** Index in array if building array elements */
  readonly index?: number;
}

/**
 * Function type for generating nested context
 * Allows users to customize how context is passed from parent to child builders
 *
 * IMPORTANT: This function is called by the PARENT before the child builder executes.
 * You can only access parent context and parameter metadata, NOT child builder state.
 * If you need child-specific data in context, the child must augment context in its build() method.
 *
 * @example
 * const generator: NestedContextGenerator<MyContext> = ({ parentContext, parameterName, index }) => {
 *   let nodeId = parentContext.nodeId || 'root';
 *   nodeId += \`-\${parameterName}\`;
 *   if (index !== undefined) nodeId += \`-\${index}\`;
 *   return { ...parentContext, parameterName, index, nodeId, __nestedContextGenerator__: generator };
 * };
 */
export type NestedContextGenerator<C extends BaseBuildContext> = (
  params: NestedContextParams<C>,
) => C;

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
export interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Optional custom context generator for nested builders */
  readonly __nestedContextGenerator__?: NestedContextGenerator<BaseBuildContext>;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
export interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
  /**
   * Get current value without building (useful for conditional logic and context generation)
   * @param key - The property key
   * @returns The current value or undefined
   */
  peek<K extends keyof T>(key: K): T[K] | undefined;
  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  has<K extends keyof T>(key: K): boolean;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
export function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== 'object') {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return obj[FLUENT_BUILDER_SYMBOL] === true && typeof obj.build === 'function';
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
export function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * Supports custom context generation via __nestedContextGenerator__
 *
 * IMPORTANT: Due to the deferred pattern, this is called by the parent BEFORE the child executes.
 * The parent can only pass information from its own context and parameter metadata.
 * Children should augment the context in their build() method if they need to add child-specific data.
 *
 * @param params - Named parameters for context creation
 * @param params.parentContext - Context from parent builder
 * @param params.parameterName - Name of the parameter being built
 * @param params.index - Optional array index
 * @returns New context with inherited properties
 */
export function createNestedContext<C extends BaseBuildContext>(params: {
  readonly parentContext: C;
  readonly parameterName: string;
  readonly index?: number;
}): C {
  const { parentContext, parameterName, index } = params;

  if (parentContext.__nestedContextGenerator__) {
    return parentContext.__nestedContextGenerator__({
      parentContext,
      parameterName,
      ...(index !== undefined ? { index } : {}),
    }) as C;
  }

  return {
    ...parentContext,
    parameterName,
    ...(index !== undefined ? { index } : {}),
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
export function resolveValue<T, C extends BaseBuildContext>(value: unknown, context?: C): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context
        ? createNestedContext({ parentContext: context, parameterName: 'array', index })
        : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context
        ? createNestedContext({ parentContext: context, parameterName: key })
        : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
export abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Storage for auxiliary data (templates, deferred functions, etc.) */
  protected auxiliaryData = new Map<string, unknown>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some(
        item =>
          isFluentBuilder(item) ||
          (typeof item === 'object' && item !== null && this.containsBuilder(item)),
      );

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown, visited: WeakSet<object> = new WeakSet()): boolean {
    if (isFluentBuilder(obj)) return true;

    // Handle circular references by tracking visited objects
    if (obj && typeof obj === 'object') {
      if (visited.has(obj)) return false; // Already checked this object
      visited.add(obj);
    }

    if (Array.isArray(obj)) {
      return obj.some(item => this.containsBuilder(item, visited));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some(val => this.containsBuilder(val, visited));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          const nestedContext = context
            ? createNestedContext({ parentContext: context, parameterName: key, index })
            : undefined;
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context
        ? createNestedContext({ parentContext: context, parameterName: key })
        : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue =
        typeof value === 'function' && !isFluentBuilder(value)
          ? (value as () => T[K] | FluentBuilder<T[K], C>)()
          : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue =
      typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
        ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
        : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Set auxiliary data (for plugins and deferred operations)
   * @param key - Unique key for the auxiliary data
   * @param value - Value to store
   */
  protected setAuxiliary<TAux>(key: string, value: TAux): this {
    this.auxiliaryData.set(key, value);
    return this;
  }

  /**
   * Get auxiliary data (for plugins and deferred operations)
   * @param key - Unique key for the auxiliary data
   * @returns The auxiliary data or undefined
   */
  protected getAuxiliary<TAux>(key: string): TAux | undefined {
    return this.auxiliaryData.get(key) as TAux | undefined;
  }

  /**
   * Push item to auxiliary array (creates array if doesn't exist)
   * @param key - Unique key for the auxiliary array
   * @param item - Item to push to the array
   */
  protected pushAuxiliary<TAux>(key: string, item: TAux): this {
    const existing = this.auxiliaryData.get(key) as TAux[] | undefined;
    if (existing && Array.isArray(existing)) {
      existing.push(item);
    } else {
      this.auxiliaryData.set(key, [item]);
    }
    return this;
  }

  /**
   * Get auxiliary array (returns empty array if doesn't exist)
   * @param key - Unique key for the auxiliary array
   * @returns The auxiliary array
   */
  protected getAuxiliaryArray<TAux>(key: string): TAux[] {
    const existing = this.auxiliaryData.get(key) as TAux[] | undefined;
    return existing && Array.isArray(existing) ? existing : [];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
export function createInspectMethod(
  builderName: string,
  properties: Record<string, unknown>,
): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}
`;
