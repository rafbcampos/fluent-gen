// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Transform Build Method Plugin Integration > Basic Plugin Functionality > should handle plugin errors gracefully 1`] = `
"
/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
const FLUENT_BUILDER_SYMBOL = Symbol.for("fluent-builder");

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== "object") {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return (
    obj[FLUENT_BUILDER_SYMBOL] === true &&
    typeof obj.build === "function"
  );
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * @param parentContext - Context from parent builder
 * @param parameterName - Name of the parameter being built
 * @param index - Optional array index
 * @returns New context with inherited properties
 */
function createNestedContext<C extends BaseBuildContext>(
  parentContext: C,
  parameterName: string,
  index?: number,
): C {
  return {
    ...parentContext,
    parameterName,
    index,
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
function resolveValue<T, C extends BaseBuildContext>(
  value: unknown,
  context?: C
): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context ? createNestedContext(context, 'array', index) : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context ? createNestedContext(context, key) : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some((item) => isFluentBuilder(item) ||
        (typeof item === 'object' && item !== null && this.containsBuilder(item)));

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown): boolean {
    if (isFluentBuilder(obj)) return true;
    if (Array.isArray(obj)) {
      return obj.some((item) => this.containsBuilder(item));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some((val) => this.containsBuilder(val));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = context ? createNestedContext(context, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context ? createNestedContext(context, key) : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue = typeof value === 'function' && !isFluentBuilder(value)
        ? (value as () => T[K] | FluentBuilder<T[K], C>)()
        : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue = typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
      ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
      : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
function createInspectMethod(builderName: string, properties: Record<string, unknown>): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}


import type { Text, TextStyle } from "./src/__tests__/fixtures/plugin-scenario.ts";

export interface TextBuilderMethods {
  /** Unique identifier */
  withId(value: string): TextBuilder;
  /** Text value */
  withValue(value: string): TextBuilder;
  /** Text styling */
  withStyle(value: TextStyle | FluentBuilder<TextStyle, BaseBuildContext>): TextBuilder;
}

export class TextBuilder extends FluentBuilderBase<Text> implements TextBuilderMethods, FluentBuilder<Text, BaseBuildContext> {
  private static readonly defaults: Record<string, unknown> = { id: "", value: "" };

  constructor(initial?: Partial<Text>) {
    super(initial);
  }

  /** Unique identifier */

  withId(value: string): TextBuilder {
    return this.set("id", value);
  }

  /** Text value */

  withValue(value: string): TextBuilder {
    return this.set("value", value);
  }

  /** Text styling */

  withStyle(value: TextStyle | FluentBuilder<TextStyle, BaseBuildContext>): TextBuilder {
    return this.set("style", value);
  }

  /**
   * Builds the final Text object
   * @param context - Optional build context for nested builders
   */
  build(context?: BaseBuildContext): Text {
    return this.buildWithDefaults(TextBuilder.defaults, context);
  }

  [Symbol.for("nodejs.util.inspect.custom")](): string {
    return createInspectMethod("TextBuilder", this.values);
  }
}

/**
 * Creates a new Text builder
 * @param initial Optional initial values
 * @returns A fluent builder for Text
 */
export function text(initial?: Partial<Text>): TextBuilder {
  return new TextBuilder(initial);
}"
`;

exports[`Transform Build Method Plugin Integration > Basic Plugin Functionality > should support transformBuildMethod hook 1`] = `
"
/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
const FLUENT_BUILDER_SYMBOL = Symbol.for("fluent-builder");

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== "object") {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return (
    obj[FLUENT_BUILDER_SYMBOL] === true &&
    typeof obj.build === "function"
  );
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * @param parentContext - Context from parent builder
 * @param parameterName - Name of the parameter being built
 * @param index - Optional array index
 * @returns New context with inherited properties
 */
function createNestedContext<C extends BaseBuildContext>(
  parentContext: C,
  parameterName: string,
  index?: number,
): C {
  return {
    ...parentContext,
    parameterName,
    index,
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
function resolveValue<T, C extends BaseBuildContext>(
  value: unknown,
  context?: C
): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context ? createNestedContext(context, 'array', index) : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context ? createNestedContext(context, key) : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some((item) => isFluentBuilder(item) ||
        (typeof item === 'object' && item !== null && this.containsBuilder(item)));

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown): boolean {
    if (isFluentBuilder(obj)) return true;
    if (Array.isArray(obj)) {
      return obj.some((item) => this.containsBuilder(item));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some((val) => this.containsBuilder(val));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = context ? createNestedContext(context, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context ? createNestedContext(context, key) : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue = typeof value === 'function' && !isFluentBuilder(value)
        ? (value as () => T[K] | FluentBuilder<T[K], C>)()
        : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue = typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
      ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
      : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
function createInspectMethod(builderName: string, properties: Record<string, unknown>): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}


import type { Text, TextStyle } from "./src/__tests__/fixtures/plugin-scenario.ts";

export interface TextBuilderMethods {
  /** Unique identifier */
  withId(value: string): TextBuilder;
  /** Text value */
  withValue(value: string): TextBuilder;
  /** Text styling */
  withStyle(value: TextStyle | FluentBuilder<TextStyle, BaseBuildContext>): TextBuilder;
}

export class TextBuilder extends FluentBuilderBase<Text> implements TextBuilderMethods, FluentBuilder<Text, BaseBuildContext> {
  private static readonly defaults: Record<string, unknown> = { id: "", value: "" };

  constructor(initial?: Partial<Text>) {
    super(initial);
  }

  /** Unique identifier */

  withId(value: string): TextBuilder {
    return this.set("id", value);
  }

  /** Text value */

  withValue(value: string): TextBuilder {
    return this.set("value", value);
  }

  /** Text styling */

  withStyle(value: TextStyle | FluentBuilder<TextStyle, BaseBuildContext>): TextBuilder {
    return this.set("style", value);
  }

  /**
   * Builds the final Text object
   * @param context - Optional build context for nested builders
   */
  // Enhanced by plugin
  build(context?: BaseBuildContext): Text {
    return this.buildWithDefaults(TextBuilder.defaults, context);
  }

  [Symbol.for("nodejs.util.inspect.custom")](): string {
    return createInspectMethod("TextBuilder", this.values);
  }
}

/**
 * Creates a new Text builder
 * @param initial Optional initial values
 * @returns A fluent builder for Text
 */
export function text(initial?: Partial<Text>): TextBuilder {
  return new TextBuilder(initial);
}"
`;

exports[`Transform Build Method Plugin Integration > Context-Based Plugin Customization > should allow plugins to customize based on any property 1`] = `
"
/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
const FLUENT_BUILDER_SYMBOL = Symbol.for("fluent-builder");

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== "object") {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return (
    obj[FLUENT_BUILDER_SYMBOL] === true &&
    typeof obj.build === "function"
  );
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * @param parentContext - Context from parent builder
 * @param parameterName - Name of the parameter being built
 * @param index - Optional array index
 * @returns New context with inherited properties
 */
function createNestedContext<C extends BaseBuildContext>(
  parentContext: C,
  parameterName: string,
  index?: number,
): C {
  return {
    ...parentContext,
    parameterName,
    index,
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
function resolveValue<T, C extends BaseBuildContext>(
  value: unknown,
  context?: C
): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context ? createNestedContext(context, 'array', index) : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context ? createNestedContext(context, key) : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some((item) => isFluentBuilder(item) ||
        (typeof item === 'object' && item !== null && this.containsBuilder(item)));

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown): boolean {
    if (isFluentBuilder(obj)) return true;
    if (Array.isArray(obj)) {
      return obj.some((item) => this.containsBuilder(item));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some((val) => this.containsBuilder(val));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = context ? createNestedContext(context, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context ? createNestedContext(context, key) : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue = typeof value === 'function' && !isFluentBuilder(value)
        ? (value as () => T[K] | FluentBuilder<T[K], C>)()
        : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue = typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
      ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
      : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
function createInspectMethod(builderName: string, properties: Record<string, unknown>): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}


import type { Text, TextStyle } from "./src/__tests__/fixtures/plugin-scenario.ts";

export interface TextBuilderMethods {
  /** Unique identifier */
  withId(value: string): TextBuilder;
  /** Text value */
  withValue(value: string): TextBuilder;
  /** Text styling */
  withStyle(value: TextStyle | FluentBuilder<TextStyle, BaseBuildContext>): TextBuilder;
}

export class TextBuilder extends FluentBuilderBase<Text> implements TextBuilderMethods, FluentBuilder<Text, BaseBuildContext> {
  private static readonly defaults: Record<string, unknown> = { id: "", value: "" };

  constructor(initial?: Partial<Text>) {
    super(initial);
  }

  /** Unique identifier */

  withId(value: string): TextBuilder {
    return this.set("id", value);
  }

  /** Text value */

  withValue(value: string): TextBuilder {
    return this.set("value", value);
  }

  /** Text styling */

  withStyle(value: TextStyle | FluentBuilder<TextStyle, BaseBuildContext>): TextBuilder {
    return this.set("style", value);
  }

  /**
   * Builds the final Text object
   * @param context - Optional build context for nested builders
   */
  build(context?: BaseBuildContext): Text {
    return this.buildWithDefaults(TextBuilder.defaults, context);
  }

  [Symbol.for("nodejs.util.inspect.custom")](): string {
    return createInspectMethod("TextBuilder", this.values);
  }
}

/**
 * Creates a new Text builder
 * @param initial Optional initial values
 * @returns A fluent builder for Text
 */
export function text(initial?: Partial<Text>): TextBuilder {
  return new TextBuilder(initial);
}"
`;

exports[`Transform Build Method Plugin Integration > Deterministic ID Plugin > should generate complete deterministic ID logic for Action type 1`] = `
"
/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
const FLUENT_BUILDER_SYMBOL = Symbol.for("fluent-builder");

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== "object") {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return (
    obj[FLUENT_BUILDER_SYMBOL] === true &&
    typeof obj.build === "function"
  );
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * @param parentContext - Context from parent builder
 * @param parameterName - Name of the parameter being built
 * @param index - Optional array index
 * @returns New context with inherited properties
 */
function createNestedContext<C extends BaseBuildContext>(
  parentContext: C,
  parameterName: string,
  index?: number,
): C {
  return {
    ...parentContext,
    parameterName,
    index,
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
function resolveValue<T, C extends BaseBuildContext>(
  value: unknown,
  context?: C
): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context ? createNestedContext(context, 'array', index) : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context ? createNestedContext(context, key) : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some((item) => isFluentBuilder(item) ||
        (typeof item === 'object' && item !== null && this.containsBuilder(item)));

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown): boolean {
    if (isFluentBuilder(obj)) return true;
    if (Array.isArray(obj)) {
      return obj.some((item) => this.containsBuilder(item));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some((val) => this.containsBuilder(val));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = context ? createNestedContext(context, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context ? createNestedContext(context, key) : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue = typeof value === 'function' && !isFluentBuilder(value)
        ? (value as () => T[K] | FluentBuilder<T[K], C>)()
        : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue = typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
      ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
      : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
function createInspectMethod(builderName: string, properties: Record<string, unknown>): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}


import type { Action, Text } from "./src/__tests__/fixtures/plugin-scenario.ts";

export interface ActionBuilderMethods {
  /** Unique identifier */
  withId(value: string): ActionBuilder;
  /** Action type */
  withType(value: "navigate" | "submit" | "cancel"): ActionBuilder;
  /** Target URL for navigation */
  withTarget(value: string): ActionBuilder;
  /** Action label */
  withLabel(value: Text | FluentBuilder<Text, BaseBuildContext>): ActionBuilder;
}

export class ActionBuilder extends FluentBuilderBase<Action> implements ActionBuilderMethods, FluentBuilder<Action, BaseBuildContext> {
  private static readonly defaults: Record<string, unknown> = { id: "", type: "navigate" };

  constructor(initial?: Partial<Action>) {
    super(initial);
  }

  /** Unique identifier */

  withId(value: string): ActionBuilder {
    return this.set("id", value);
  }

  /** Action type */

  withType(value: "navigate" | "submit" | "cancel"): ActionBuilder {
    return this.set("type", value);
  }

  /** Target URL for navigation */

  withTarget(value: string): ActionBuilder {
    return this.set("target", value);
  }

  /** Action label */

  withLabel(value: Text | FluentBuilder<Text, BaseBuildContext>): ActionBuilder {
    return this.set("label", value);
  }

  build(context?: BaseBuildContext & { parentId?: string; parameterName?: string; index?: number }): Action {
    // Generate deterministic ID based on context
    const generatedId = this.generateId(context);
    const result = { ...this.values };

    // Set ID if not already provided
    if (!result.id) {
      result.id = generatedId;
    }

    // Build nested components with enhanced context
    const enhancedContext = {
      ...context,
      parentId: generatedId,
    };

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = enhancedContext ? createNestedContext(enhancedContext, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      (result as Record<string, unknown>)[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = enhancedContext ? createNestedContext(enhancedContext, key) : undefined;
      (result as Record<string, unknown>)[key] = resolveValue(value, nestedContext);
    });

    return result as Action;
  }

  private generateId(context?: BaseBuildContext & { parentId?: string; parameterName?: string; index?: number }): string {
    if (!context?.parentId) {
      return "root";
    }

    const parts = [context.parentId, context.parameterName];
    if (context.index !== undefined) {
      parts.push(context.index.toString());
    }

    return parts.join("-");
  }

  [Symbol.for("nodejs.util.inspect.custom")](): string {
    return createInspectMethod("ActionBuilder", this.values);
  }
}

/**
 * Creates a new Action builder
 * @param initial Optional initial values
 * @returns A fluent builder for Action
 */
export function action(initial?: Partial<Action>): ActionBuilder {
  return new ActionBuilder(initial);
}"
`;

exports[`Transform Build Method Plugin Integration > Deterministic ID Plugin > should not modify types without id property 1`] = `
"
/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
const FLUENT_BUILDER_SYMBOL = Symbol.for("fluent-builder");

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== "object") {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return (
    obj[FLUENT_BUILDER_SYMBOL] === true &&
    typeof obj.build === "function"
  );
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * @param parentContext - Context from parent builder
 * @param parameterName - Name of the parameter being built
 * @param index - Optional array index
 * @returns New context with inherited properties
 */
function createNestedContext<C extends BaseBuildContext>(
  parentContext: C,
  parameterName: string,
  index?: number,
): C {
  return {
    ...parentContext,
    parameterName,
    index,
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
function resolveValue<T, C extends BaseBuildContext>(
  value: unknown,
  context?: C
): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context ? createNestedContext(context, 'array', index) : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context ? createNestedContext(context, key) : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some((item) => isFluentBuilder(item) ||
        (typeof item === 'object' && item !== null && this.containsBuilder(item)));

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown): boolean {
    if (isFluentBuilder(obj)) return true;
    if (Array.isArray(obj)) {
      return obj.some((item) => this.containsBuilder(item));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some((val) => this.containsBuilder(val));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = context ? createNestedContext(context, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context ? createNestedContext(context, key) : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue = typeof value === 'function' && !isFluentBuilder(value)
        ? (value as () => T[K] | FluentBuilder<T[K], C>)()
        : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue = typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
      ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
      : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
function createInspectMethod(builderName: string, properties: Record<string, unknown>): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}


import type { SimpleType } from "./src/__tests__/fixtures/plugin-scenario.ts";

export interface SimpleTypeBuilderMethods {
  withValue(value: string): SimpleTypeBuilder;
  withCount(value: number): SimpleTypeBuilder;
}

export class SimpleTypeBuilder extends FluentBuilderBase<SimpleType> implements SimpleTypeBuilderMethods, FluentBuilder<SimpleType, BaseBuildContext> {
  private static readonly defaults: Record<string, unknown> = { value: "" };

  constructor(initial?: Partial<SimpleType>) {
    super(initial);
  }


  withValue(value: string): SimpleTypeBuilder {
    return this.set("value", value);
  }


  withCount(value: number): SimpleTypeBuilder {
    return this.set("count", value);
  }

  /**
   * Builds the final SimpleType object
   * @param context - Optional build context for nested builders
   */
  build(context?: BaseBuildContext): SimpleType {
    return this.buildWithDefaults(SimpleTypeBuilder.defaults, context);
  }

  [Symbol.for("nodejs.util.inspect.custom")](): string {
    return createInspectMethod("SimpleTypeBuilder", this.values);
  }
}

/**
 * Creates a new SimpleType builder
 * @param initial Optional initial values
 * @returns A fluent builder for SimpleType
 */
export function simpleType(initial?: Partial<SimpleType>): SimpleTypeBuilder {
  return new SimpleTypeBuilder(initial);
}"
`;

exports[`Transform Build Method Plugin Integration > Deterministic ID Plugin > should work with complex nested types like Button 1`] = `
"
/**
 * Runtime utilities for fluent builders
 * Core functionality for builder pattern implementation
 */

/**
 * Unique symbol for identifying fluent builders
 * Used across module boundaries for proper type identification
 */
const FLUENT_BUILDER_SYMBOL = Symbol.for("fluent-builder");

/**
 * Base context interface for builder operations
 * Provides information about the builder's position in the object hierarchy
 */
interface BaseBuildContext {
  /** Parent builder identifier */
  readonly parentId?: string;
  /** Name of the parameter being built */
  readonly parameterName?: string;
  /** Index in array if building array elements */
  readonly index?: number;
  /** Additional context properties */
  readonly [key: string]: unknown;
}

/**
 * Core fluent builder interface
 * All generated builders implement this interface
 */
interface FluentBuilder<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Identifies this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL]: true;
  /**
   * Builds the final object
   * @param context - Optional build context
   */
  build(context?: C): T;
}

/**
 * Type guard to check if a value is a fluent builder
 * Uses Symbol.for to ensure proper identification across module boundaries
 * @param value - Value to check
 * @returns True if value is a fluent builder
 */
function isFluentBuilder<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is FluentBuilder<T, C> {
  if (value === null || typeof value !== "object") {
    return false;
  }

  // Safely check for symbol property
  const hasSymbol = FLUENT_BUILDER_SYMBOL in value;
  if (!hasSymbol) {
    return false;
  }

  // Type narrowing: at this point we know it's an object with our symbol
  const obj = value as { [FLUENT_BUILDER_SYMBOL]: unknown; build?: unknown };

  return (
    obj[FLUENT_BUILDER_SYMBOL] === true &&
    typeof obj.build === "function"
  );
}

/**
 * Type guard to check if a value is a builder array
 * @param value - Value to check
 * @returns True if value is an array of builders
 */
function isBuilderArray<T = unknown, C extends BaseBuildContext = BaseBuildContext>(
  value: unknown,
): value is Array<FluentBuilder<T, C>> {
  return Array.isArray(value) && value.every(isFluentBuilder);
}

/**
 * Creates a new context for nested builders with proper inheritance
 * @param parentContext - Context from parent builder
 * @param parameterName - Name of the parameter being built
 * @param index - Optional array index
 * @returns New context with inherited properties
 */
function createNestedContext<C extends BaseBuildContext>(
  parentContext: C,
  parameterName: string,
  index?: number,
): C {
  return {
    ...parentContext,
    parameterName,
    index,
  } as C;
}

/**
 * Recursively resolves builders in a value
 * @param value - Value to resolve
 * @param context - Optional build context
 * @returns Resolved value with all builders built
 */
function resolveValue<T, C extends BaseBuildContext>(
  value: unknown,
  context?: C
): unknown {
  if (isFluentBuilder<T, C>(value)) {
    return value.build(context);
  }

  if (Array.isArray(value)) {
    return value.map((item, index) => {
      const arrayContext = context ? createNestedContext(context, 'array', index) : undefined;
      return resolveValue(item, arrayContext);
    });
  }

  if (value && typeof value === 'object' && value.constructor === Object) {
    const resolved: Record<string, unknown> = {};
    for (const [key, val] of Object.entries(value)) {
      const nestedContext = context ? createNestedContext(context, key) : undefined;
      resolved[key] = resolveValue(val, nestedContext);
    }
    return resolved;
  }

  return value;
}

/**
 * Base class for all generated builders
 * Provides core functionality for the builder pattern
 */
abstract class FluentBuilderBase<T, C extends BaseBuildContext = BaseBuildContext> {
  /** Marks this as a fluent builder */
  readonly [FLUENT_BUILDER_SYMBOL] = true;
  /** Storage for property values */
  protected values: Partial<T> = {};
  /** Storage for nested builders - includes indexed keys for array elements */
  protected builders = new Map<string, FluentBuilder<unknown, C> | unknown>();
  /** Storage for mixed arrays (static values + builders) */
  protected mixedArrays = new Map<string, unknown[]>();
  /** Optional build context */
  protected context?: C;

  /**
   * Creates a new builder instance
   * @param initial - Optional initial values
   */
  constructor(initial?: Partial<T>) {
    if (initial) {
      this.values = { ...initial };
    }
  }

  /**
   * Sets a property value, handling both regular values and nested builders
   * @param key - The property key
   * @param value - The value or builder to set
   */
  protected set<K extends keyof T>(key: K, value: unknown): this {
    const keyStr = String(key);

    if (isFluentBuilder(value)) {
      this.builders.set(keyStr, value);
      // Clear from values if it was there
      delete this.values[key];
    } else if (Array.isArray(value)) {
      // Handle mixed arrays (builders + static values)
      const hasBuilders = value.some((item) => isFluentBuilder(item) ||
        (typeof item === 'object' && item !== null && this.containsBuilder(item)));

      if (hasBuilders) {
        // Store the array for mixed processing
        this.mixedArrays.set(keyStr, value);
        // Store individual builders with indexed keys
        value.forEach((item, index) => {
          if (isFluentBuilder(item)) {
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          } else if (typeof item === 'object' && item !== null && this.containsBuilder(item)) {
            // Store objects containing builders for recursive resolution
            this.builders.set(\`\${keyStr}[\${index}]\`, item);
          }
        });
        // Clear from values
        delete this.values[key];
      } else {
        // Pure static array
        this.values[key] = value as T[K];
        // Clear from mixed arrays if it was there
        this.mixedArrays.delete(keyStr);
      }
    } else if (typeof value === 'object' && value !== null && this.containsBuilder(value)) {
      // Object containing builders
      this.builders.set(keyStr, value);
      delete this.values[key];
    } else {
      // Static value
      this.values[key] = value as T[K];
      // Clear from builders if it was there
      this.builders.delete(keyStr);
      this.mixedArrays.delete(keyStr);
    }
    return this;
  }

  /**
   * Checks if an object contains any builders recursively
   */
  private containsBuilder(obj: unknown): boolean {
    if (isFluentBuilder(obj)) return true;
    if (Array.isArray(obj)) {
      return obj.some((item) => this.containsBuilder(item));
    }
    if (obj && typeof obj === 'object' && obj.constructor === Object) {
      return Object.values(obj).some((val) => this.containsBuilder(val));
    }
    return false;
  }

  /**
   * Builds the final object with defaults and nested builder resolution
   * @param defaults - Optional default values
   * @param context - Optional build context
   */
  protected buildWithDefaults(defaults?: Partial<T>, context?: C): T {
    const result: Record<string, unknown> = defaults ? { ...defaults } : {};

    // Apply explicitly set values
    Object.assign(result, this.values);

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = context ? createNestedContext(context, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      result[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = context ? createNestedContext(context, key) : undefined;
      result[key] = resolveValue(value, nestedContext);
    });

    // Type assertion is safe here as we're building from typed values
    return result as T;
  }

  /**
   * Conditionally sets a property based on a predicate
   * @param predicate - Function to determine if the property should be set
   * @param property - The property key
   * @param value - The value or value generator
   */
  public if<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    value: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    if (predicate(this)) {
      // Type guard: check if it's a function that's not a builder
      const resolvedValue = typeof value === 'function' && !isFluentBuilder(value)
        ? (value as () => T[K] | FluentBuilder<T[K], C>)()
        : value;
      this.set(property, resolvedValue);
    }
    return this;
  }

  /**
   * Conditionally sets a property choosing between two values
   * @param predicate - Function to determine which value to use
   * @param property - The property key
   * @param trueValue - Value to use if predicate is true
   * @param falseValue - Value to use if predicate is false
   */
  public ifElse<K extends keyof T>(
    predicate: (builder: this) => boolean,
    property: K,
    trueValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>),
    falseValue: T[K] | FluentBuilder<T[K], C> | (() => T[K] | FluentBuilder<T[K], C>)
  ): this {
    const valueToUse = predicate(this) ? trueValue : falseValue;
    // Type guard: check if it's a function that's not a builder
    const resolvedValue = typeof valueToUse === 'function' && !isFluentBuilder(valueToUse)
      ? (valueToUse as () => T[K] | FluentBuilder<T[K], C>)()
      : valueToUse;
    this.set(property, resolvedValue);
    return this;
  }

  /**
   * Checks if a property has been set
   * @param key - The property key to check
   */
  public has<K extends keyof T>(key: K): boolean {
    const keyStr = String(key);
    return key in this.values || this.builders.has(keyStr) || this.mixedArrays.has(keyStr);
  }

  /**
   * Get current value (useful for conditional logic)
   * @param key - The property key
   * @returns The current value or undefined
   */
  public peek<K extends keyof T>(key: K): T[K] | undefined {
    return this.values[key];
  }

  /**
   * Abstract build method to be implemented by generated builders
   * @param context - Optional build context
   */
  abstract build(context?: C): T;
}

/**
 * Creates an inspect method for better debugging experience
 * @param builderName - Name of the builder class
 * @param properties - Current builder properties
 * @returns Formatted string for inspection
 */
function createInspectMethod(builderName: string, properties: Record<string, unknown>): string {
  return \`\${builderName} { properties: \${JSON.stringify(properties, null, 2)} }\`;
}


import type { Button, Text, Action } from "./src/__tests__/fixtures/plugin-scenario.ts";

export interface ButtonBuilderMethods {
  /** Unique identifier */
  withId(value: string): ButtonBuilder;
  /** Button text */
  withLabel(value: Text | FluentBuilder<Text, BaseBuildContext>): ButtonBuilder;
  /** Click action */
  withAction(value: Action | FluentBuilder<Action, BaseBuildContext>): ButtonBuilder;
  /** Button variant */
  withVariant(value: "primary" | "secondary" | "danger"): ButtonBuilder;
}

export class ButtonBuilder extends FluentBuilderBase<Button> implements ButtonBuilderMethods, FluentBuilder<Button, BaseBuildContext> {
  private static readonly defaults: Record<string, unknown> = { id: "", label: { id: "", value: "" }, variant: "primary" };

  constructor(initial?: Partial<Button>) {
    super(initial);
  }

  /** Unique identifier */

  withId(value: string): ButtonBuilder {
    return this.set("id", value);
  }

  /** Button text */

  withLabel(value: Text | FluentBuilder<Text, BaseBuildContext>): ButtonBuilder {
    return this.set("label", value);
  }

  /** Click action */

  withAction(value: Action | FluentBuilder<Action, BaseBuildContext>): ButtonBuilder {
    return this.set("action", value);
  }

  /** Button variant */

  withVariant(value: "primary" | "secondary" | "danger"): ButtonBuilder {
    return this.set("variant", value);
  }

  build(context?: BaseBuildContext & { parentId?: string; parameterName?: string; index?: number }): Button {
    // Generate deterministic ID based on context
    const generatedId = this.generateId(context);
    const result = { ...this.values };

    // Set ID if not already provided
    if (!result.id) {
      result.id = generatedId;
    }

    // Build nested components with enhanced context
    const enhancedContext = {
      ...context,
      parentId: generatedId,
    };

    // Process mixed arrays
    this.mixedArrays.forEach((array, key) => {
      const resolvedArray: unknown[] = [];
      array.forEach((item, index) => {
        const indexedKey = \`\${key}[\${index}]\`;
        const nestedContext = enhancedContext ? createNestedContext(enhancedContext, key, index) : undefined;

        // Check if this index has a builder stored
        if (this.builders.has(indexedKey)) {
          const builderOrObj = this.builders.get(indexedKey);
          resolvedArray[index] = resolveValue(builderOrObj, nestedContext);
        } else {
          // Static value
          resolvedArray[index] = item;
        }
      });
      (result as Record<string, unknown>)[key] = resolvedArray;
    });

    // Process regular builders (non-array)
    this.builders.forEach((value, key) => {
      // Skip indexed keys (they're handled in mixed arrays)
      if (key.includes('[')) return;
      // Skip keys that are in mixed arrays
      if (this.mixedArrays.has(key)) return;

      const nestedContext = enhancedContext ? createNestedContext(enhancedContext, key) : undefined;
      (result as Record<string, unknown>)[key] = resolveValue(value, nestedContext);
    });

    return result as Button;
  }

  private generateId(context?: BaseBuildContext & { parentId?: string; parameterName?: string; index?: number }): string {
    if (!context?.parentId) {
      return "root";
    }

    const parts = [context.parentId, context.parameterName];
    if (context.index !== undefined) {
      parts.push(context.index.toString());
    }

    return parts.join("-");
  }

  [Symbol.for("nodejs.util.inspect.custom")](): string {
    return createInspectMethod("ButtonBuilder", this.values);
  }
}

/**
 * Creates a new Button builder
 * @param initial Optional initial values
 * @returns A fluent builder for Button
 */
export function button(initial?: Partial<Button>): ButtonBuilder {
  return new ButtonBuilder(initial);
}"
`;
